[
  {
    "title": "First Person Shooter",
    "description": "Diving into my academic archive, you'll stumble upon a side project that I worked on during my bachelor's daysâ€”an open-source venture that reflects the technical intricacies of game development. This project, seamlessly compatible with Unreal Engine 4.26, provides a vivid example of my hands-on experience in both the Blueprint system and C++ coding. In essence, this first-person shooter project unfolds as a dynamic arena where players navigate tunnels, confronting challenges imposed by a goblin invasion. As such, the player's experience is shaped by a robust underlying system that allows to progress in the game, unlocking new abilities and power-ups.",
    "imageUrl": "https://user-images.githubusercontent.com/11835209/112525104-d56e6e00-8da0-11eb-8b5b-8267b034ffc5.gif",
    "liveUrl": "https://github.com/Napalys/FirstPersonShooter",
    "sourceUrl": "https://github.com/Napalys/FirstPersonShooter",
    "icons": [
      { "src": "arch-logo.png", "label": "Arch linux" },
      { "src": "cpp-logo.png", "label": "C++" },
      { "src": "unreal-engine-logo.png", "label": "Unreal Engine 4" }
    ]
  },

  {
    "title": "j-Ecdar",
    "description": "In J-Ecdar, the project at the core of my master's thesis, I undertook a deep dive into the field of model-checking tools, with a specific focus on the Uppaal branch called Ecdar (Environment for Compositional Design and Analysis of Real Time Systems). My two-semester endeavor to create J-Ecdar, an open-source model-checking engine, ultimately turned out as a valuable lesson in agile project navigation. While originally aiming for an extension of J-Ecdar's features in the second phase of the project (based on the existing Ecdar 0.10 software), the focus shifted towards a reliable alignment between theory and practice instead, which any further functionalities could subsequently be based on. Said fit between theory and practical implementation, which had turned out to be lacking with the original Ecdar 0.10, was successfully achieved in the course of this project.",
    "imageUrl": "https://github.com/Napalys/Portfolio/assets/11835209/8e7715fc-dc0e-4362-bb9f-77039c6ae9aa",
    "liveUrl": "https://vbn.aau.dk/ws/files/305757029/JECDAR_0.2.pdf",
    "sourceUrl": "https://github.com/Ecdar/j-Ecdar",
    "icons": [
      { "src": "cpp-logo.png", "label": "C++" },
      { "src": "java-logo.png", "label": "Java" }
    ]
  },

  {
    "title": "Reveaal",
    "description": "Reveaal, a project that I've had the pleasure to participate in during my time as a research assistant at Aalborg University, introduces a robust model-checking engine for Ecdar (Environment for Compositional Design and Analysis of Real Time Systems), crafted entirely in Rust. Committed to open-source principles, Reveaal aims to replicate the functionalities of J-Ecdar (an adaptation of Ecdar that I had developed in a previous project), providing a platform for efficient verification processes.The engine leverages the Ecdar DBM Library for handling operations on temporal zones, ensuring seamless integration with existing tools. Designed to operate efficiently across multiple cores and potentially scale over diverse machines, the engine sets ambitious goals in terms of accuracy and performance.",
    "imageUrl": "https://github.com/Napalys/Portfolio/assets/11835209/2701bd4f-c65f-470a-b4fb-ed972dda4893",
    "liveUrl": "https://www.ecdar.net/",
    "sourceUrl": "https://github.com/Ecdar/Reveaal",
    "icons": [
      { "src": "rust-logo.png", "label": "Rust" },
      { "src": "git-logo.png", "label": "Git" },
      { "src": "linux-tux-logo.png", "label": "Ubuntu" }
    ]
  },

  {
    "title": "Swarm-Robotics",
    "description": "During my tenure as a research assistant, I contributed to Aalborg University's advancements in the field of Swarm Robotics. My primary focus was set on the development of a seamless integration between the Argos3 simulation and Uppaal, the university's own model checking tool. Our overarching goal was to design an efficient mechanism for a swarm of robots to collaboratively execute a set of tasks without causing interference, leveraging the capabilities of Uppaal. This innovative approach holds promising applications, such as optimizing processes in manufacturing environments like a Lego factory, where robots could work jointly to assemble custom orders of Lego bricks without disruption. ",
    "imageUrl": "https://github.com/Napalys/Portfolio/assets/11835209/af8b6791-aca9-4263-90b7-cb5507227a6c",
    "liveUrl": "https://ojs.aaai.org/index.php/ICAPS/article/view/19843/19602",
    "sourceUrl": "https://github.com/DEIS-Tools/Swarm-Robotics",
    "icons": [
      { "src": "cpp-logo.png", "label": "C++" },
      { "src": "cmake-logo.png", "label": "CMake" },
      { "src": "linux-tux-logo.png", "label": "Ubuntu" },
      { "src": "git-logo.png", "label": "Git" }
    ]
  },

  {
    "title": "Attachable-clicker",
    "description": "I, like many software enthusiasts, have spent numerous hours glued to my computer screen, whether engaged in playing video games or performing other tasks, some of which would require the monotonous repetition of the same action over and over again. Finding the latter increasingly more tedious and boring, I was eventually inspired to seek a solution to this issue through automation. \"Attachable-clicker\" is one example of a product that I developed in response - a piece of software that automates the simple act of clicking the mouse in a computer game, without requiring the player's presence in front of the screen. While conventional clickers fall short in practice, as they typically restrict other PC activities once activated, my Attachable-clicker sends commands directly to a specific, designated window, thus allowing for a continued use of the computer while the clicker remains active.The project is coded in C++ and leverages the Qt framework for its graphical user interface (GUI).",
    "imageUrl": "https://user-images.githubusercontent.com/11835209/106388860-af4fd180-63e0-11eb-87b1-bece9058c308.png",
    "liveUrl": "https://github.com/Napalys/Attachable-clicker/releases/tag/0.1.0",
    "sourceUrl": "https://github.com/Napalys/Attachable-clicker",
    "icons": [
      { "src": "cpp-logo.png", "label": "C++" },
      { "src": "cmake-logo.png", "label": "CMake" },
      { "src": "git-logo.png", "label": "Git" }
    ]
  },


  {
    "title": "Omnisight",
    "description": "During my tenure at Robotto, a start-up focused on developing software for drone applications, I took on a key role in a project aimed at enhancing search and rescue operations, where I was in charge of planning, designing, and overseeing a significant portion of the implementation process. Our objective was to develop a solution capable of autonomous flight involving multiple drones, thus requiring meticulous architectural planning for seamless testing and deployment. The backend was developed in C++, while the frontend utilized Android Java. The functionality we were aiming for was for drones to autonomously search designated regions and assist search and rescue teams in swiftly locating missing individuals. Real-time detection of people was a critical aspect in this, with operations conducted at altitudes exceeding 100 meters. We focused on implementing functionalities such as autonomous navigation, terrain-adaptive flight, computer vision, and AI-driven object identification, ensuring accurate location data even in challenging environments.",
    "imageUrl": "https://static.wixstatic.com/media/8b18de_16995d58efd64344bafd16985b2e7b7e~mv2.png/v1/crop/x_203,y_57,w_1027,h_669/fill/w_722,h_471,al_c,q_85,usm_0.66_1.00_0.01,enc_auto/8b18de_16995d58efd64344bafd16985b2e7b7e~mv2.png%22",
    "liveUrl": "https://www.robotto.ai/omnisight",
    "sourceUrl": "",
    "icons": [
      { "src": "cpp-logo.png", "label": "C++" },
      { "src": "java-logo.png", "label": "Java" },
      { "src": "linux-tux-logo.png", "label": "Ubuntu" },
      { "src": "android-logo.png", "label": "Android" },
      { "src": "git-logo.png", "label": "Git" },
      { "src": "docker-logo.png", "label": "Docker" }
    ]
  },

  {
    "title": "FireAI",
    "description": "During my time at the start-up company Robotto, I was leading the development of \"FireAI\", a drone-based firefighter assisting tool aimed at revolutionizing wildfire management. Leveraging C++ for the backend and Java for the Android frontend, I took on a pivotal role in crafting a comprehensive solution comprising autonomous navigation, radio communication, computer vision for wildfire detection as well as area mapping. Our efforts culminated in a product capable of real-time fire detection and mapping, empowering users to make informed decisions swiftly. FireAI's edge-level computing process ensures timely updates, mitigating the reliance on outdated fire maps. In summary, my involvement in the FireAI project showcases my proficiency in C++ and Java, as well as my capacity to mentor and guide a dedicated team. Throughout the project, I assumed the role of a nurturing mentor, fostering a collaborative environment where team members felt empowered to share ideas, learn new concepts, and grow professionally.",
    "imageUrl": "https://static.wixstatic.com/media/8b18de_892923281c8e48abb28d6832b65bf5a6~mv2.png/v1/fill/w_600,h_348,al_c,q_85,usm_0.66_1.00_0.01,enc_auto/8b18de_892923281c8e48abb28d6832b65bf5a6~mv2.png",
    "liveUrl": "https://www.robotto.ai/demo",
    "sourceUrl": "",
    "icons": [
      { "src": "cpp-logo.png", "label": "C++" },
      { "src": "java-logo.png", "label": "Java" },
      { "src": "linux-tux-logo.png", "label": "Ubuntu" },
      { "src": "android-logo.png", "label": "Android" },
      { "src": "git-logo.png", "label": "Git" },
      { "src": "docker-logo.png", "label": "Docker" }
    ]
  },

  {
    "title": "FutMote",
    "description": "During my internship at Futarque, I collaborated on the development of a mobile app aimed at enhancing the user experience with their smart TV box, the company's main product. Working alongside another intern, we were driving the creation of a versatile solution to seamlessly control various Futarque products. Our tasks included building the server-side infrastructure in C++, housed within the smart TV box, while crafting the frontend mobile application using Java. From inception to execution, we were in charge of every aspect, from fundamental controls to frontend design, and established robust communication channels. The resulting app, FutMote, offers intuitive functionalities including remote control, touchscreen-to-mouse emulation, and joystick support. With a focus on simplicity and efficiency, FutMote enables users to effortlessly navigate their entertainment experience.",
    "imageUrl": "https://play-lh.googleusercontent.com/9PhvVJdCE9KFjBF-ej56fOaz1iE_nxMjc06xPt6x0P8PpZ9sOp0r2shFAfDmoJp-dQkQ=w2560-h1440",
    "liveUrl": "https://play.google.com/store/apps/details?id=com.futarque.futmote&hl=en&gl=US",
    "sourceUrl": "",
    "icons": [
      { "src": "cpp-logo.png", "label": "C++" },
      { "src": "java-logo.png", "label": "Java" },
      { "src": "android-logo.png", "label": "Android" },
      { "src": "git-logo.png", "label": "Git" }
    ]
  }
]
